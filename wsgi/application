#!/usr/bin/python
import os
import sys
import re
import time


os.environ['TZ'] = 'Asia/Shanghai'
time.tzset()
env = {
    "MYSQL_DB_HOST": "127.0.0.1",
    "MYSQL_DB_PORT": "3306",
    "MYSQL_DB_USER": "root",
    "MYSQL_DB_PASS": "db123",
}
os.environ.update(env)


#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
# 

def application(environ, start_response):
        environ['DOCUMENT_ROOT'] = os.path.join(environ['DOCUMENT_ROOT'], 'fox/wsgi')
	ctype = 'text/plain'
	if environ['PATH_INFO'] == '/health':
		response_body = "1"
	elif environ['PATH_INFO'] == '/env':
		response_body = ['%s: %s' % (key, value)
                    for key, value in sorted(environ.items())]
		response_body = '\n'.join(response_body)
        elif environ['PATH_INFO'] == '/ip':
            #response_body = environ['HTTP_X_FORWARDED_FOR']
            import tools
            ctype, response_body = tools.urls(environ)
        elif environ['PATH_INFO'][:5] == '/test':
            import test
            ctype, response_body = test.urls(environ)
            #response_body += environ['HTTP_COOKIE']
        elif environ['PATH_INFO'][:4] == '/fun':
            import proxy
            ctype, response_body = proxy.urls(environ)
        elif environ['PATH_INFO'] == '/os':
            response_body = ['%s: %s' % (key, os.environ.get(key)) for key in os.environ.keys()]
            response_body = '\n'.join(response_body)
        elif environ['PATH_INFO'] == '/robots.txt':
            response_body = 'User-agent: *\nDisallow: /env\nDisallow: /os\n'
	else:
            import blog
	    ctype, response_body = blog.urls(environ)

	status = '200 OK'
	response_headers = [('Content-Type', ctype), ('Content-Length', str(len(response_body)))]
        if 'headers' in locals().keys():
            response_headers.extend(headers)

	start_response(status, response_headers)
	return [response_body]

#
# Below for testing only
#
if __name__ == '__main__':
	from wsgiref.simple_server import make_server
	httpd = make_server('localhost', 8053, application)
	# Wait for a single request, serve it and quit.
	httpd.handle_request()
